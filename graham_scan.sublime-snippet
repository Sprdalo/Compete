<snippet>
	<content><![CDATA[
//poziva se u mainu
//input();
//graham();
struct point{
	double x;
	double y;
};

int n;
vector<point> tacke;
point p;

void input(){
	cin >> n;
	if (!n){
		ok = 1;
		return;
	}

	for (int i = 0; i < n; ++i){
		point t;
		cin >> t.x >> t.y;
		tacke.push_back(t);
	}
}

bool uporedi(point a, point b){
	if (a.y == b.y)
		return a.x < b.x;

	return a.y < b.y;
}

double dif(point a, point b){
	return (a.x-b.x) * (a.x-b.x) + (a.y-b.y)*(a.y-b.y);
}

int orijentacija(point p, point q, point r) { 
	int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y); 

	if (val == 0) 
		return 0; 
	if (val > 0)
		return 1;
	else
		return 2;
} 

void izaberi(){
	int ind = min_element(tacke.begin(), tacke.end(), uporedi) - tacke.begin();
	swap(tacke[0], tacke[ind]);
	p = tacke[0];
}

int compare(const void *vp1, const void *vp2) { 
	point *p1 = (point *)vp1; 
	point *p2 = (point *)vp2; 

	int o = orijentacija(p, *p1, *p2); 
	if (o == 0) {
		if (dif(p, *p2) >= dif(p, *p1)) 
			return -1 ;
		else
			return 1; 
	}

	if (o == 2)
		return -1;
	return 1;
} 

void print(stack<point> s){
	while(!s.empty()){
		point a = s.top();
		s.pop();

		cout << '(' << a.x << ',' << a.y << ") ";
	}
	cout << '\n';

}

point sledeci(stack<point> &S) { 
	point p = S.top(); 
	S.pop(); 
	point res = S.top(); 
	S.push(p); 
	return res; 
} 

void graham(){
	izaberi();

	
	qsort(&tacke[1], n-1, sizeof(point), compare); 
	vector<point> points = {p};

	for (int i = 1; i < n; ++i) { 
		while (i < n - 1 && orijentacija(p, tacke[i], tacke[i+1]) == 0) 
			i++; 

		points.push_back(tacke[i]); 
	} 

	int len = points.size();
	if (len < 3) return;
	
	stack<point> s;
	s.push(points[0]);
	s.push(points[1]);
	s.push(points[2]);
	for (int i = 3; i < len; ++i){

		while(orijentacija(sledeci(s), s.top(), points[i]) != 2){
			s.pop();
		}

		s.push(points[i]);
	}

	print(s);
}		
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>graham_scan</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
